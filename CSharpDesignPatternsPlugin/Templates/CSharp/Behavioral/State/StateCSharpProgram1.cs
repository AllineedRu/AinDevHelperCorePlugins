using System;

namespace AinDevHelperStatePattern {
    /// <summary>
    /// Представим систему управления заказами в интернет-магазине. 
    /// В этой системе заказ может находиться в различных состояниях, таких как "новый", "обрабатывается", "отправлен" и "доставлен". 
    /// Мы можем использовать паттерн "Состояние", чтобы моделировать эти различные состояния и поведение заказа в зависимости от его текущего состояния.
    ///
    /// В этом примере мы создаем интерфейс IOrderState, который определяет методы для обработки и отмены заказа. 
    /// Затем мы создаем классы, представляющие конкретные состояния заказа: "Новый", "Обрабатывается" и "Отменен". 
    /// Класс Order использует текущее состояние для выполнения соответствующих операций.
    /// При запуске программы мы создаем заказ, переводим его в состояние "Обрабатывается", пытаемся повторно обработать заказ, 
    /// отменяем заказ и пытаемся обработать отмененный заказ. 
    /// В результате мы видим, что поведение заказа изменяется в зависимости от его текущего состояния, что является основным принципом паттерна "Состояние".
    /// </summary>
    public static class Program {

        public static void Main() {
            Console.WriteLine("=======================================================================");
            Console.WriteLine("Демонстрация применения шаблона проектирования \"Состояние\" (State)");
            Console.WriteLine("=======================================================================");

            // Пример использования паттерна "Состояние" для управления заказами в интернет-магазине
            Order order = new Order();

            order.ProcessOrder(); // Переводим заказ в состояние "Обрабатывается"
            order.ProcessOrder(); // Попытка повторно обработать заказ

            order.CancelOrder(); // Отменяем заказ
            order.ProcessOrder(); // Попытка обработать отмененный заказ
        }
    }    
}