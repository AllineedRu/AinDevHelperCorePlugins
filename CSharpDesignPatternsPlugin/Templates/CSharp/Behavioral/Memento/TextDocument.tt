<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using static AinDevHelperMementoPattern.MementoConsoleUtils;

namespace AinDevHelperMementoPattern {
    /// <summary>
    /// Класс текстового документа
    /// </summary>
    public class TextDocument {
        /// <summary>
        /// Текущий текст в документе
        /// </summary>
        private string _text;

        /// <summary>
        /// Название документа
        /// </summary>
        private readonly string _documentName;

        /// <summary>
        /// Стек из состояний изменённого текста для возможности отмены правок (Undo)
        /// </summary>
        private readonly Stack<TextDocumentMemento> _mementos = new Stack<TextDocumentMemento>();

        /// <summary>
        /// Стек из состояний отменённых правок текста для возможности возврата правок (Redo)
        /// </summary>
        private readonly Stack<TextDocumentMemento> _redoMementos = new Stack<TextDocumentMemento>();

        /// <summary>
        /// Конструктор документа с заданным текстом
        /// </summary>
        /// <param name="text">исходный текст документа</param>
        public TextDocument(string documentName, string text) {
            _documentName = documentName;
            _text = text;
            Save();
        }

        /// <summary>
        /// Обновить текст документа на заданный новый текст
        /// </summary>
        /// <param name="newText">новый текст для документа</param>
        public void UpdateText(string newText) {
            _text = newText;
            Save();
        }

        /// <summary>
        /// Отменить последнее обновление текста в документе (последнюю правку)
        /// </summary>
        public void Undo() {
            if (_mementos.Count > 1) {
                _redoMementos.Push(_mementos.Pop());
                var currentText = _text;
                _text = _mementos.Peek().Text;

                WriteLineWithColor($"\t>> Выполнили отмену правок (Undo): текст '{currentText}' возвращён к состоянию '{_text}'", ConsoleColor.DarkGreen);
            } else {
                WriteLineWithColor($"\t[!] Не удалось выполнить отмену правок (Undo), т.к. стек _mementos содержит единственный элемент, представляющий исходный текст документа.", ConsoleColor.Red);
            }
        }

        /// <summary>
        /// Вернуть обратно правку после её отмены (если отмена правки была)
        /// </summary>
        public void Redo() {
            if (_redoMementos.Count > 0) {
                _mementos.Push(_redoMementos.Pop());
                var currentText = _text;
                _text = _mementos.Peek().Text;

                WriteLineWithColor($"\t>> Выполнили возврат правок (Redo) после отмены: текст '{currentText}' возвращён к состоянию '{_text}'", ConsoleColor.DarkCyan);
            } else {
                WriteLineWithColor($"\t[!] Не удалось выполнить возврат правок (Redo), т.к. стек _redoMementos пуст.", ConsoleColor.Red);                
            }
        }

        /// <summary>
        /// Сохранить текст и состояние текущего документа в стеке для возмжоности дальнейшей отмены (Undo) правок
        /// </summary>
        private void Save() {
            _mementos.Push(new TextDocumentMemento(_text));
        }

        public void PrintText() {
            Console.WriteLine($"Текущий текст в документе '{_documentName}': {_text}");
        }
    }  
}