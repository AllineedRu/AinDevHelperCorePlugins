<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace AinDevHelperThreadSafeSingletonPattern {
    public sealed class Logger {
        /// <summary>
        /// Закрытое статическое поле класса, которое хранит ссылку на экземпляр класса-синглтона Logger
        /// </summary>
        private static Logger? instance;

        /// <summary>
        /// Закрытое статическое поле класса (только для чтения - readonly), которое хранит ссылку на специальный
        /// объект, используемый для получения потоками блокировки по нему
        /// </summary>
        private static readonly object _lockObject = new object();

        /// <summary>
        /// Строка, содержащая полный лог с сообщениями
        /// </summary>
        private string log;

        /// <summary>
        /// Конструктор класса-синглтона - закрытый (private) для запрета прямого создания экземпляров
        /// класса в вызывающем коде: единственный способ получить экземпляр класса - это обратиться
        /// к статическому свойству <see cref="Instance" />
        /// </summary>
        private Logger() {
            log = "Начальная запись в логе";
        }

        /// <summary>
        /// Открытое (public) статическое свойство, которое возвращает экземпляр класса, единый для
        /// всего приложения. Внутри производится блокировка по специальному общему для потоков объекту <see cref="_lockObject"/>, которая
        /// гарантирует, что экземпляр класса Logger будет создан только одним потоком: если два конкурирующих потока попытаются получить экземпляр
        /// класса Logger, то именно тот поток, который первым завладеет блокировкой по объекту _lockObject, создаст экземпляр класса. При этом к тому времени, когда второй поток
        /// завладеет блокировкой по объекту <see cref="_lockObject"/>, экземпляр <see cref="instance"/> уже не будет равен null, поэтому для второго потока мы не войдем в оператор if,
        /// который создаёт объект класса. Этот способ, несмотря на потокобезопасность, снижает производительность, т.к. блокировка по объекту <see cref="_lockObject"/>
        /// запрашивается каждый раз, когда мы хотим получить доступ к единому экземпляру <see cref="instance"/> класса.
        /// Альтернативным способом открытому свойству <see cref="Instance"/> является объявление в классе-синглтоне открытого метода GetInstance(), возвращаемый тип
        /// которого будет так же Logger, а содержимое будет таким же, как и наполнение для блока get, представленного ниже.
        /// </summary>        
        public static Logger Instance {
            get {
                lock (_lockObject) {
                    if (instance == null) {
                        instance = new Logger();
                    }
                    return instance;
                }                
            }            
        }

        /// <summary>
        /// Метод для добавления нового сообщения в лог
        /// </summary>
        public void Log(string message) {
            log += "\n" + message;
        }

        /// <summary>
        /// Метод для распечатки полного лога на экране консоли
        /// </summary>
        public void PrintLog() {
            Console.WriteLine(log);
        }
    }
}