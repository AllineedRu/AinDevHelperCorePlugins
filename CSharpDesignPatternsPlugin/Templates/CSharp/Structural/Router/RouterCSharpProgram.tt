<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AinDevHelperPluginLibrary.Language" #>
using System;

namespace AinDevHelperRouterPattern {
    /// <summary>
<# if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { #>
    /// Let's imagine a situation where we need to implement a simple router for a web application. 
    /// We can use the Router pattern to map URLs to specific request handlers. Below is a C# code example that demonstrates this.
    ///
    /// In this example, <see cref="Router" /> maps URLs to the appropriate controllers (in this case the <see cref="HomeController" /> and <see cref="AboutController" /> classes). 
    /// When the <see cref="Router.RouteRequest" /> method is called with a specific URL, the router checks for the presence of a corresponding controller and calls the Index method 
    /// this controller to process the request.
    ///
    /// When you run the program, you can see how the router routes requests to different controllers depending on the specified URL.
<# } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { #>
    /// Stellen wir uns eine Situation vor, in der wir einen einfachen Router für eine Webanwendung implementieren müssen. 
    /// Wir können das Router-Muster verwenden, um URLs bestimmten Anforderungshandlern zuzuordnen. Unten finden Sie ein C#-Codebeispiel, das dies demonstriert.
    ///
    /// In diesem Beispiel ordnet <see cref="Router" /> URLs den entsprechenden Controllern zu (in diesem Fall den Klassen <see cref="HomeController" /> und <see cref="AboutController" />). 
    /// Wenn die <see cref="Router.RouteRequest" />-Methode mit einer bestimmten URL aufgerufen wird, prüft der Router, ob ein entsprechender Controller vorhanden ist, 
    /// und ruft die Index-Methode auf Dieser Verantwortliche übernimmt die Bearbeitung der Anfrage.
    ///
    /// Wenn Sie das Programm ausführen, können Sie sehen, wie der Router Anfragen abhängig von der angegebenen URL an verschiedene Controller weiterleitet.
<# } else { #>
    /// Давайте представим ситуацию, когда нам нужно реализовать простой маршрутизатор для веб-приложения. 
    /// Мы можем использовать паттерн "Маршрутизатор" (Router) для определения соответствия URL-адресов определенным обработчикам запросов. 
    /// Ниже приведён пример кода на C#, демонстрирующий это.
    ///
    /// В этом примере <see cref="Router" /> отображает URL-адреса на соответствующие контроллеры (в данном случае классы <see cref="HomeController" /> и <see cref="AboutController" />). 
    /// При вызове метода <see cref="Router.RouteRequest" /> с определенным URL-адресом маршрутизатор проверяет наличие соответствующего контроллера и вызывает метод Index 
    /// этого контроллера для обработки запроса.
    ///
    /// При запуске программы можно увидеть, как маршрутизатор направляет запросы к различным контроллерам в зависимости от указанного URL-адреса.
<# } #>
    /// </summary>
    public static class Program {
        public static void Main() {
            Console.WriteLine("=============================================================================");
<# if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { #>
            Console.WriteLine("Demonstration of the \"Router\" Design Pattern");
<# } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { #>
            Console.WriteLine("Demonstration des „Router“-Musters");
<# } else { #>
            Console.WriteLine("Демонстрация применения шаблона проектирования \"Маршрутизатор\" (Router)");
<# } #>
            Console.WriteLine("=============================================================================");

<# if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { #>
            // Creating controller instances
            var homeController = new HomeController();
            var aboutController = new AboutController();

            // Create a router and add routes
            var router = new Router();
            router.AddRoute("/", homeController);
            router.AddRoute("/about", aboutController);

            // Requests processing goes here
            router.RouteRequest("/");
            router.RouteRequest("/about");
            router.RouteRequest("/contact"); // Page doesn't exist
<# } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { #>
            // Controller-Instanzen erstellen
            var homeController = new HomeController();
            var aboutController = new AboutController();

            // Erstellen Sie einen Router und fügen Sie Routen hinzu
            var router = new Router();
            router.AddRoute("/", homeController);
            router.AddRoute("/about", aboutController);

            // Hier erfolgt die Bearbeitung von Anfragen
            router.RouteRequest("/");
            router.RouteRequest("/about");
            router.RouteRequest("/contact"); // Seite existiert nicht
<# } else { #>
            // Создаем экземпляры контроллеров
            var homeController = new HomeController();
            var aboutController = new AboutController();

            // Создаем маршрутизатор и добавляем маршруты
            var router = new Router();
            router.AddRoute("/", homeController);
            router.AddRoute("/about", aboutController);

            // Здесь идет обработка запросов
            router.RouteRequest("/");
            router.RouteRequest("/about");
            router.RouteRequest("/contact"); // Страница не существует
<# } #>
        }
    }
}