/*
Copyright 2024 Allineed.Ru, Max Damascus

Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
and associated documentation files (the "Software"), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия среды выполнения: 17.0.0.0
//  
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CSharpDesignPatternsPlugin.Templates.CSharp.Structural.Flyweight
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using AinDevHelperPluginLibrary.Language;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class FlyweightCSharpProgram : FlyweightCSharpProgramBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\n\r\nnamespace AinDevHelperFlyweightPattern {\r\n    /// <summary>\r\n");
            
            #line 11 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"    /// Below is an example of implementing the Flyweight pattern in C# using the task of creating web pages.
    /// 
    /// In this example, the <see cref=""WebPage"" /> class represents a web page. 
    /// The <see cref=""WebPageFactory"" /> class is a opportunist factory and is responsible for creating and managing <see cref=""WebPage"" /> instances.
    /// If a web page with the given content already exists, the factory returns the previously created instance, otherwise it creates a new instance 
    /// and saves it for later use.
    ///
    /// When the <see cref=""IWebPage.Display"" /> method is called, each web page is displayed with the specified theme. 
    /// Please note that web pages with the same content are reused to save money 
    /// memory and reduce the number of objects created.
");
            
            #line 22 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"    /// Nachfolgend finden Sie ein Beispiel für die Implementierung des Flyweight-Musters in C# mithilfe der Aufgabe, Webseiten zu erstellen.
    ///
    /// In diesem Beispiel stellt die Klasse <see cref=""WebPage"" /> eine Webseite dar. 
    /// Die Klasse <see cref=""WebPageFactory"" /> ist eine opportunistische Factory und für die Erstellung und Verwaltung von <see cref=""WebPage"" />-Instanzen verantwortlich. 
    /// Wenn eine Webseite mit dem angegebenen Inhalt bereits vorhanden ist, gibt die Factory die zuvor erstellte Instanz zurück, andernfalls erstellt sie eine neue Instanz 
    /// und speichert sie zur späteren Verwendung.
    ///
    /// Wenn die Methode <see cref=""IWebPage.Display"" /> aufgerufen wird, wird jede Webseite mit dem angegebenen Thema angezeigt. 
    /// Beachten Sie, dass Webseiten mit demselben Inhalt wiederverwendet werden, was Speicherplatz spart und die Anzahl der erstellten Objekte reduziert.
");
            
            #line 32 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"    /// Ниже приведён пример реализации паттерна ""Приспособленец/Легковес"" (Flyweight) на языке C# с использованием задачи о создании веб-страниц.
    ///
    /// В этом примере класс <see cref=""WebPage"" /> представляет веб-страницу. Класс <see cref=""WebPageFactory"" /> является фабрикой приспособленцев и отвечает за создание 
    /// и управление экземплярами <see cref=""WebPage"" />. 
    /// Если веб-страница с заданным содержимым уже существует, фабрика возвращает ранее созданный экземпляр, иначе она создает новый экземпляр и сохраняет его 
    /// для последующего использования.
    ///
    /// При вызове метода <see cref=""IWebPage.Display"" /> каждая веб-страница отображается с указанной темой. 
    /// Обратите внимание, что веб-страницы с одинаковым содержимым используются повторно, что позволяет сэкономить память и уменьшить количество создаваемых объектов. 
");
            
            #line 42 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    /// </summary>\r\n    public static class Program {\r\n        public static void" +
                    " Main() {\r\n            Console.WriteLine(\"======================================" +
                    "=======================================\");\r\n");
            
            #line 47 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"Demonstration of the \\\"Flyweight\\\" Design Pattern\"" +
                    ");\r\n");
            
            #line 49 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"Demonstration des „Fliegengewicht“-Musters\");\r\n");
            
            #line 51 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"Демонстрация применения шаблона проектирования \\\"П" +
                    "риспособленец/Легковес\\\" (Flyweight)\");\r\n");
            
            #line 53 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"==================================================" +
                    "===========================\");\r\n\r\n            var webPageFactory = new WebPageFa" +
                    "ctory();\r\n\r\n");
            
            #line 58 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"            // Creating multiple web pages with different content
            var page1 = webPageFactory.GetWebPage(""Welcome to my website!"");
            var page2 = webPageFactory.GetWebPage(""Contact information"");
            var page3 = webPageFactory.GetWebPage(""About me"");

            // Displaying web pages with different themes
            page1.Display(""Light"");
            page2.Display(""Dark"");
            page3.Display(""Light"");
");
            
            #line 68 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"            // Erstellen mehrerer Webseiten mit unterschiedlichen Inhalten
            var page1 = webPageFactory.GetWebPage(""Willkommen auf meiner Website!"");
            var page2 = webPageFactory.GetWebPage(""Kontaktinformationen"");
            var page3 = webPageFactory.GetWebPage(""Über mich"");

            // Anzeigen von Webseiten mit unterschiedlichen Themen
            page1.Display(""Licht"");
            page2.Display(""Dunkel"");
            page3.Display(""Licht"");
");
            
            #line 78 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"            // Создаем несколько веб-страниц с разным содержимым
            var page1 = webPageFactory.GetWebPage(""Добро пожаловать на мой веб-сайт!"");
            var page2 = webPageFactory.GetWebPage(""Контактная информация"");
            var page3 = webPageFactory.GetWebPage(""Обо мне"");

            // Отображаем веб-страницы с разными темами
            page1.Display(""Светлая"");
            page2.Display(""Тёмная"");
            page3.Display(""Светлая"");
");
            
            #line 88 "C:\Users\1\source\repos\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Flyweight\FlyweightCSharpProgram.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class FlyweightCSharpProgramBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
