// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия среды выполнения: 17.0.0.0
//  
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CSharpDesignPatternsPlugin.Templates.CSharp.Structural.Decorator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using AinDevHelperPluginLibrary.Language;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DecoratorCSharpProgram : DecoratorCSharpProgramBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("namespace AinDevHelperDecoratorPattern {\r\n    /// <summary>\r\n");
            
            #line 9 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"    /// Let's look at an example of using the Decorator pattern in C# to create a system for managing user access rights. 
    /// In this example, we will be adding different levels of access to the underlying user object.
    ///
    /// In this example, <see cref=""IUser"" /> represents the interface for the underlying user object. 
    /// The <see cref=""User"" /> class represents the base user. 
    /// The decorators <see cref=""AdminUserDecorator"" /> and <see cref=""ModeratorUserDecorator"" /> add appropriate access levels to the user. 
    /// The Decorator pattern allows you to dynamically add new functionality or change the behavior of an object without changing its underlying structure.
    ///
    /// When you run the program, you will see how each user is displayed based on their access level (administrator or moderator) added through decorators.
");
            
            #line 19 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"    /// Schauen wir uns ein Beispiel für die Verwendung des Decorator-Musters in C# an, um ein System zur Verwaltung von Benutzerzugriffsrechten zu erstellen. 
    /// In diesem Beispiel fügen wir dem zugrunde liegenden Benutzerobjekt verschiedene Zugriffsebenen hinzu.
    ///
    /// In diesem Beispiel stellt <see cref=""IUser"" /> die Schnittstelle für das zugrunde liegende Benutzerobjekt dar. 
    /// Die Klasse <see cref=""User"" /> repräsentiert den Basisbenutzer. 
    /// Die Dekoratoren <see cref=""AdminUserDecorator"" /> und <see cref=""ModeratorUserDecorator"" /> fügen dem Benutzer entsprechende Zugriffsebenen hinzu. 
    /// Mit dem Decorator-Muster können Sie dynamisch neue Funktionen hinzufügen oder das Verhalten eines Objekts ändern, ohne die zugrunde liegende Struktur zu ändern.
    ///
    /// Wenn Sie das Programm ausführen, sehen Sie, wie jeder Benutzer basierend auf seiner durch Dekoratoren hinzugefügten Zugriffsebene (Administrator oder Moderator) angezeigt wird.
");
            
            #line 29 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"    /// Рассмотрим пример использования паттерна ""Декоратор"" (Decorator) на языке C# для создания системы управления правами доступа пользователей. 
    /// В этом примере мы будем добавлять различные уровни доступа к базовому объекту пользователя.
    ///
    /// В этом примере <see cref=""IUser"" /> представляет интерфейс для базового объекта пользователя. 
    /// Класс <see cref=""User"" /> представляет базового пользователя. 
    /// Декораторы <see cref=""AdminUserDecorator"" /> и <see cref=""ModeratorUserDecorator"" /> добавляют соответствующие уровни доступа к пользователю. 
    /// Паттерн ""Декоратор"" позволяет динамически добавлять новые функциональности или изменять поведение объекта, не изменяя его основной структуры.
    ///
    /// При запуске программы вы увидите, как каждый пользователь отображается с учетом своего уровня доступа (администратор или модератор), добавленного через декораторы.
");
            
            #line 39 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    /// </summary>\r\n    public static class Program {\r\n        public static void" +
                    " Main() {\r\n            Console.WriteLine(\"======================================" +
                    "=======================================\");\r\n");
            
            #line 44 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"Demonstration of the \\\"Decorator\\\" Design Pattern\"" +
                    ");\r\n");
            
            #line 46 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"Demonstration des „Decorator“-Musters\");\r\n");
            
            #line 48 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"Демонстрация применения шаблона проектирования \\\"Д" +
                    "екоратор\\\" (Decorator)\");\r\n");
            
            #line 50 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            Console.WriteLine(\"==================================================" +
                    "===========================\");\r\n\r\n");
            
            #line 53 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 if (AinDevHelperLanguageCodeConstants.EN.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"            IUser user = new User(""Alice"");
            Console.WriteLine(""Basic User:"");
            user.DisplayInfo();

            IUser adminUser = new AdminUserDecorator(new User(""Bob""));
            Console.WriteLine(""\nAdmin User:"");
            adminUser.DisplayInfo();

            IUser modUser = new ModeratorUserDecorator(new User(""Charlie""));
            Console.WriteLine(""\nModerator User:"");
            modUser.DisplayInfo();
");
            
            #line 65 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } else if (AinDevHelperLanguageCodeConstants.DE.Equals(LanguageCode)) { 
            
            #line default
            #line hidden
            this.Write(@"            IUser user = new User(""Alexander"");
            Console.WriteLine(""Einfacher Benutzer:"");
            user.DisplayInfo();

            IUser adminUser = new AdminUserDecorator(new User(""Arwin""));
            Console.WriteLine(""\nAdmin-Benutzer:"");
            adminUser.DisplayInfo();

            IUser modUser = new ModeratorUserDecorator(new User(""Carsten""));
            Console.WriteLine(""\nModeratorbenutzer:"");
            modUser.DisplayInfo();
");
            
            #line 77 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"            IUser user = new User(""Пётр"");
            Console.WriteLine(""Базовый пользователь:"");
            user.DisplayInfo();

            IUser adminUser = new AdminUserDecorator(new User(""Иван""));
            Console.WriteLine(""\nАдминистратор:"");
            adminUser.DisplayInfo();

            IUser modUser = new ModeratorUserDecorator(new User(""Василий""));
            Console.WriteLine(""\nМодератор:"");
            modUser.DisplayInfo();
");
            
            #line 89 "C:\Users\1\source\repos\test\AinDevHelperCorePlugins\CSharpDesignPatternsPlugin\Templates\CSharp\Structural\Decorator\DecoratorCSharpProgram.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DecoratorCSharpProgramBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
